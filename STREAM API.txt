//STREAM API

                                                                  STREAM
                                                                  ======
-Stream API(Application Programming Interface) is mainly used to process collections of objects // Collections - ArrayList
 (i.e..,takes input from the Collections, Arrays or I/O channels).
-Streams donâ€™t change the original data structure	

PROCESS FLOW:-
------------
 COLLECTIONS     =====>                      STREAM                         ====>    RESULT
  (I/P's)			      (Intermediate Operations + Terminal Operations)		
                                (1)map                    (1)collect
							    (2)filter				  (2)forEach
							    (3)sorted				  (3)reduce
								                          (4)long count

 


STREAM-Intermediate Operations:
===============================
1)map = To modify elements based on some condition
--------------------------------------------------
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Set;

public class Sample
{
public static void main(String[] args)
{
ArrayList<Integer> list = new ArrayList<>(); //syntax
list.add(10);
list.add(20);
list.add(30);
list.add(40);
list.add(50);
List<Integer> square =    list
                         .stream()
						 .map(x->x*x)
						 .collect(Collectors.toList());
 System.out.println(square);
 }
 }
OUTPUT>>
[100, 400, 900, 1600, 2500]

2)filter = To filter elements based on criteria
-----------------------------------------------
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Set;
public class Sample
{
public static void main(String[] args)
{
ArrayList<String> list = new ArrayList<>();
list.add("Raghav");
list.add("Renumaa");
list.add("Gajal");
list.add("Gaayu");
list.add("Raasukutty");
List<String> Start =  list
                     .stream()
					 .filter(s->s.startsWith("R"))
					 .collect(Collectors.toList());
System.out.println(Start);
 }
 }
OUTPUT>>
[Raju, Renumaa, Raasukutty]

3)sorted = To sort elements in the stream
------------------------------------------
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Set;
public class Sample
{
public static void main(String[] args)
{
ArrayList<Integer> list = new ArrayList<>();
list.add(100);
list.add(500);
list.add(400);
list.add(000);
list.add(300);
List<Integer> Ascend =    list
                         .stream()
						 .sorted()
						 .collect(Collectors.toList());
 System.out.println(Ascend);
 }
 }
OUTPUT>>
[0, 100, 300, 400, 500]



STREAM-Terminal Operations:
===========================
1)collect = Collect elements after operation
--------------------------------------------
import java.util.Set;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
public class Sample
{
public static void main(String[] args)
{
ArrayList<String> list = new ArrayList<>();
list.add("Red");
list.add("Blue");
list.add("Green");
list.add("Yellow");
list.add("Pink");
list.add("Rainbow");
Set<String> Color =  list
                     .stream()
					 .filter(s->s.startsWith("R"))
					 .collect(Collectors.toSet());
System.out.println(Color);
 }
 }
OUTPUT>>
[Red, Rainbow]

2)forEach = To iterate through each element/Traverse of stream
--------------------------------------------------------------
import java.util.ArrayList;
public class Sample
{
public static void main(String[] args)
{
ArrayList<String> list = new ArrayList<>();
list.add("Red");
list.add("Blue");
list.add("Green");
list.add("Yellow");
list.add("Pink");
list.add("Rainbow");
list.stream().forEach(color->System.out.println(color));
}
}
OUTPUT>>
Red
Blue
Green
Yellow
Pink
Rainbow

3)reduce = To reduce elements of stream into single result/value
----------------------------------------------------------------
import java.util.ArrayList;
public class Sample
{
public static void main(String[] args)
{
ArrayList<Integer> nums = new ArrayList<>();
nums.add(3);
nums.add(5);
nums.add(4);
nums.add(6);
nums.add(10);
int even = nums.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);
System.out.println(even);
}
}
OUTPUT>>
20

4)long count = returns the count of elements in the stream. This is a special case of a reduction 
-------------------------------------------------------------------------------------------------
import java.util.ArrayList;
public class Sample
{
public static void main(String[] args)
{
ArrayList<Integer> nums = new ArrayList<>();
nums.add(1);
nums.add(2);  
nums.add(3);
nums.add(4); 
nums.add(5);
long oddCount = nums.stream()
                .filter(n->n%2==0)
                .count();
System.out.println(oddCount);
}
}
OUTPUT>>
2

sorted WITH ASCENDING & DESCENDING:-
===================================
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Set;
public class Sample
{
public static void main(String[] args)
{
ArrayList<Integer> list = new ArrayList<>();
list.add(20);
list.add(40);
list.add(30);
list.add(10);
list.add(50);
System.out.println("**********ASCENDING OREDER**********");
list.stream().sorted().forEach(Ascend -> System.out.println(Ascend));

System.out.println("**********DESCENDING OREDER**********");
list.stream().sorted((n1, n2) -> n2.compareTo(n1)).forEach(Descend-> System.out.println(Descend));
}
}
OUTPUT>>
**********ASCENDING OREDER**********
10
20
30
40
50
**********DESCENDING OREDER**********
50
40
30
20
10


Example:-
---------
//USING OF LIST,ARRAYLIST,SET,HASHSET,TREESET & COLLECTIONS FOR SORTING WITH STREAM
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
public class Sample 
{
	public static void main(String[] args)
	{
		Set<Integer> set = new HashSet<>();
		set.add(80);
		set.add(88);
		set.add(90);
		set.add(88);
		set.add(10);
		set.add(88);
		set.add(40);
		set.add(23);

		//#METHOD-1
		ArrayList<Integer> list = new ArrayList<>(set);
		List<Integer> Ascending = list.stream().sorted().collect(Collectors.toList());
		System.out.println("After Using ArrayList/List Sort : "+Ascending);
		List<Integer> Descending = list.stream().sorted((n1,n2)->n2.compareTo(n1)).collect(Collectors.toList());
		System.out.println("After Using ArrayList/List Reverse : "+Descending);

		//#METHOD-2
		Collections.sort(list);
		System.out.println("After using Collections Sort : "+list);
		Collections.reverse(list);
		System.out.println("After using Collections Reverse : "+list);

		//#METHOD-3
		TreeSet<Integer> tree = new TreeSet<>(set);
		System.out.println("After Using Tree-set : "+tree);
	}
}

OUTPUT>>
--------
After Using ArrayList/List Sort : [10, 23, 40, 80, 88, 90]
After Using ArrayList/List Reverse : [90, 88, 80, 40, 23, 10]
After using Collections Sort : [10, 23, 40, 80, 88, 90]
After using Collections Reverse : [90, 88, 80, 40, 23, 10]
After Using Tree-set : [10, 23, 40, 80, 88, 90]


